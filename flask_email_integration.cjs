/**
 * Integration between Flask Document Generator and SmartDispute.ai Email Services
 * 
 * This module connects the document generation capabilities of the Flask app with
 * the email sending functionality of SmartDispute.ai's Node.js email services.
 */

const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

// Import SmartDispute.ai's email sending functionality
const { sendDisputeLetter } = require('./send_dispute_gmail.cjs');

/**
 * Send a document generated by the Flask app using the SmartDispute email service
 * 
 * @param {Object} userData The user's data and dispute details
 * @param {string} filename The filename of the generated document
 * @returns {Promise<Object>} Result of the email sending operation
 */
async function sendGeneratedDocument(userData, filename) {
  try {
    const generatedDir = path.join(__dirname, 'generated');
    const pdfPath = path.join(generatedDir, filename);
    
    if (!fs.existsSync(pdfPath)) {
      throw new Error(`Generated document not found: ${pdfPath}`);
    }
    
    // Extract user data for the email
    const recipientEmail = userData.email;
    const recipientName = userData.full_name;
    const subject = `Your Legal Dispute Document: ${userData.dispute_type.replace('_', ' ')}`;
    
    // Create a custom message based on the dispute details
    const customMessage = `
Dear ${userData.full_name},

Your dispute letter regarding the ${userData.dispute_type.replace('_', ' ')} matter has been generated and is attached to this email. This letter was created based on the information you provided and the applicable legislation in ${userData.province}.

The letter is addressed to ${userData.recipient_name || "the recipient you specified"} and references the ${userData.legislation || "applicable legislation"}.

To use this document:
1. Review it carefully to ensure all details are correct
2. Print and sign where indicated
3. Send it to the recipient via registered mail or other trackable method
4. Keep a copy for your records

If you need any additional assistance, please reply to this email.

Regards,
SmartDispute.ai Team
    `;
    
    // Send the email with the document attachment
    const result = await sendDisputeLetter(
      recipientEmail,
      recipientName,
      pdfPath,
      null, // No dispute text needed as we're attaching the PDF
      {
        subject,
        customMessage
      }
    );
    
    return {
      success: true,
      messageId: result.messageId,
      sentTo: recipientEmail
    };
    
  } catch (error) {
    console.error('Error sending generated document:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Start the Flask app as a child process
 * 
 * @param {Object} options Configuration options for the Flask app
 * @returns {ChildProcess} The spawned Flask process
 */
function startFlaskApp(options = {}) {
  const host = options.host || '0.0.0.0';
  const port = options.port || 5050;
  const debug = options.debug !== false;
  
  const flaskProcess = spawn('python', ['app-simple.py'], {
    env: {
      ...process.env,
      FLASK_APP: 'app-simple.py',
      FLASK_ENV: debug ? 'development' : 'production',
      FLASK_DEBUG: debug ? '1' : '0',
      FLASK_HOST: host,
      FLASK_PORT: String(port)
    }
  });
  
  flaskProcess.stdout.on('data', (data) => {
    console.log(`Flask: ${data}`);
  });
  
  flaskProcess.stderr.on('data', (data) => {
    console.error(`Flask error: ${data}`);
  });
  
  flaskProcess.on('close', (code) => {
    console.log(`Flask process exited with code ${code}`);
  });
  
  return flaskProcess;
}

// Export the functions for use in the main app
module.exports = {
  sendGeneratedDocument,
  startFlaskApp
};

// Optional: Start the Flask app if this file is run directly
if (require.main === module) {
  startFlaskApp();
}