/**
 * Flask Email Integration for SmartDispute.ai
 * 
 * This module provides a way to send generated dispute letters directly via email
 * from the Flask application. It integrates with the Flask success page to offer
 * the option to send the dispute letter via email after generation.
 */

const { sendDisputeLetter } = require('./send_dispute_letter');
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// Create Express server for the email sending functionality
const app = express();
const PORT = 5051; // Use a different port than Flask (5050)

// Middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Serve a simple status page
app.get('/', (req, res) => {
  res.send(`
    <html>
      <head>
        <title>SmartDispute.ai Email Service</title>
        <style>
          body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
          }
          .status {
            padding: 15px;
            border-radius: 5px;
            background-color: #f0f8ff;
            border-left: 5px solid #3498db;
            margin-bottom: 20px;
          }
        </style>
      </head>
      <body>
        <h1>SmartDispute.ai Email Service</h1>
        <div class="status">
          <p>Email service is running on port ${PORT}</p>
          <p>This service handles email delivery for dispute letters generated by the main application.</p>
        </div>
        <p>Status: Active</p>
        <p><a href="http://localhost:5050">Return to main application</a></p>
      </body>
    </html>
  `);
});

// Endpoint to send a dispute letter via email
app.post('/send-email', async (req, res) => {
  const {
    recipientEmail,
    recipientName,
    senderName,
    disputeType,
    province,
    filePath, // Path to the generated document in the 'generated' folder
    customMessage
  } = req.body;

  // Validate required fields
  if (!recipientEmail || !filePath || !senderName) {
    return res.status(400).json({
      success: false,
      message: 'Missing required fields: recipientEmail, filePath, and senderName are required'
    });
  }

  // Construct the full file path
  const fullPath = path.resolve(filePath);
  
  // Check if file exists
  if (!fs.existsSync(fullPath)) {
    return res.status(404).json({
      success: false,
      message: `File not found at: ${fullPath}`
    });
  }

  try {
    // Send the email
    const result = await sendDisputeLetter({
      recipientEmail,
      recipientName: recipientName || 'To Whom It May Concern',
      subject: `Important: ${disputeType.replace('_', ' ').toUpperCase()} Dispute Notification`,
      senderName,
      disputeType: disputeType || 'general',
      province: province || 'CA',
      attachmentPath: fullPath,
      customMessage: customMessage || ''
    });

    res.json({
      success: true,
      message: 'Dispute letter sent successfully',
      result
    });
  } catch (error) {
    console.error('Error sending dispute letter:', error);
    res.status(500).json({
      success: false,
      message: `Failed to send dispute letter: ${error.message}`
    });
  }
});

// Start the server if run directly
if (require.main === module) {
  app.listen(PORT, () => {
    console.log(`SmartDispute.ai Email Service running on port ${PORT}`);
    console.log('Ready to send dispute letters via email');
  });
}

// Export for use in other modules
module.exports = {
  app,
  startServer: () => {
    return new Promise((resolve, reject) => {
      const server = app.listen(PORT, () => {
        console.log(`SmartDispute.ai Email Service running on port ${PORT}`);
        resolve(server);
      }).on('error', (err) => {
        console.error('Failed to start email service:', err);
        reject(err);
      });
    });
  }
};