/**
 * SmartDispute.ai Email Service
 * 
 * This module provides a Node.js email service for sending dispute letters
 * and notifications for the SmartDispute.ai platform.
 */

require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const nodemailer = require('nodemailer');
const fs = require('fs');
const path = require('path');
const pdfkit = require('pdfkit');

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Email transporter setup
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.GMAIL_USER,
    pass: process.env.GMAIL_APP_PASS
  }
});

// Check if email credentials are available
if (!process.env.GMAIL_USER || !process.env.GMAIL_APP_PASS) {
  console.warn('WARNING: Gmail credentials not found in environment variables.');
  console.warn('Set GMAIL_USER and GMAIL_APP_PASS in your .env file for email functionality.');
}

// Test email route
app.get('/test-email', (req, res) => {
  if (!process.env.GMAIL_USER || !process.env.GMAIL_APP_PASS) {
    return res.status(500).json({ 
      error: true, 
      message: 'Email credentials not configured. Check server logs for details.' 
    });
  }
  
  res.send(`
    <html>
      <head>
        <title>Test Email | SmartDispute.ai</title>
        <style>
          body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
          h1 { color: #4a5568; }
          .form-group { margin-bottom: 15px; }
          label { display: block; margin-bottom: 5px; font-weight: bold; }
          input, textarea { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }
          button { background: #4a5568; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer; }
          button:hover { background: #2d3748; }
          .success { color: green; padding: 10px; background: #f0fff4; border: 1px solid #c6f6d5; border-radius: 4px; }
          .error { color: red; padding: 10px; background: #fff5f5; border: 1px solid #fed7d7; border-radius: 4px; }
        </style>
      </head>
      <body>
        <h1>Test Email Service</h1>
        <form action="/send-test-email" method="post">
          <div class="form-group">
            <label for="to">Recipient Email:</label>
            <input type="email" id="to" name="to" required>
          </div>
          <div class="form-group">
            <label for="subject">Subject:</label>
            <input type="text" id="subject" name="subject" value="Test Email from SmartDispute.ai" required>
          </div>
          <div class="form-group">
            <label for="text">Message:</label>
            <textarea id="text" name="text" rows="5" required>This is a test email from the SmartDispute.ai platform.</textarea>
          </div>
          <div class="form-group">
            <label>
              <input type="checkbox" id="attachPdf" name="attachPdf">
              Attach Sample PDF
            </label>
          </div>
          <button type="submit">Send Test Email</button>
        </form>
      </body>
    </html>
  `);
});

// Send test email route
app.post('/send-test-email', async (req, res) => {
  try {
    const { to, subject, text, attachPdf } = req.body;
    
    if (!to || !subject || !text) {
      return res.status(400).send('Missing required fields');
    }
    
    let emailOptions = {
      from: process.env.GMAIL_USER,
      to,
      subject,
      text,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #4a5568;">SmartDispute.ai</h2>
          <p>${text}</p>
          <hr>
          <p style="color: #718096; font-size: 12px;">
            This email was sent from the SmartDispute.ai platform. 
            If you received this in error, please disregard.
          </p>
        </div>
      `
    };
    
    // If attachment is requested, create a sample PDF
    if (attachPdf) {
      const pdfPath = path.join(__dirname, 'sample-document.pdf');
      const doc = new pdfkit();
      const pdfStream = fs.createWriteStream(pdfPath);
      
      doc.pipe(pdfStream);
      
      // Add content to PDF
      doc.fontSize(25).text('SmartDispute.ai', { align: 'center' });
      doc.moveDown();
      doc.fontSize(14).text('Sample Dispute Letter Document', { align: 'center' });
      doc.moveDown();
      doc.fontSize(12).text('This is a sample PDF document generated by the SmartDispute.ai platform to test the email attachment functionality.');
      doc.moveDown();
      doc.text('Date: ' + new Date().toLocaleDateString());
      doc.moveDown();
      doc.text('This document would normally contain the content of your dispute letter, including all relevant details, legal references, and specific information related to your case.');
      doc.moveDown(2);
      doc.text('For actual dispute letters, the platform will generate a complete document based on user inputs, provincial legal frameworks, and the specific type of dispute being addressed.');
      
      doc.end();
      
      // Wait for PDF to be created
      await new Promise((resolve) => {
        pdfStream.on('finish', resolve);
      });
      
      // Add attachment to email
      emailOptions.attachments = [
        {
          filename: 'SmartDispute-Sample.pdf',
          path: pdfPath,
          contentType: 'application/pdf'
        }
      ];
    }
    
    // Send email
    const info = await transporter.sendMail(emailOptions);
    
    // Clean up temporary PDF if created
    if (attachPdf) {
      fs.unlinkSync(path.join(__dirname, 'sample-document.pdf'));
    }
    
    res.send(`
      <html>
        <head>
          <title>Email Sent | SmartDispute.ai</title>
          <style>
            body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
            h1 { color: #4a5568; }
            .success { color: green; padding: 10px; background: #f0fff4; border: 1px solid #c6f6d5; border-radius: 4px; }
            button { background: #4a5568; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer; margin-top: 20px; }
            button:hover { background: #2d3748; }
          </style>
        </head>
        <body>
          <h1>Email Sent Successfully</h1>
          <div class="success">
            <p>Email was sent successfully to ${to}</p>
            <p>Message ID: ${info.messageId}</p>
          </div>
          <a href="/test-email"><button>Send Another Email</button></a>
        </body>
      </html>
    `);
  } catch (error) {
    console.error('Error sending email:', error);
    res.status(500).send(`
      <html>
        <head>
          <title>Email Error | SmartDispute.ai</title>
          <style>
            body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
            h1 { color: #4a5568; }
            .error { color: red; padding: 10px; background: #fff5f5; border: 1px solid #fed7d7; border-radius: 4px; }
            button { background: #4a5568; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer; margin-top: 20px; }
            button:hover { background: #2d3748; }
          </style>
        </head>
        <body>
          <h1>Email Sending Failed</h1>
          <div class="error">
            <p>There was an error sending the email:</p>
            <p>${error.message}</p>
          </div>
          <a href="/test-email"><button>Try Again</button></a>
        </body>
      </html>
    `);
  }
});

// Route for sending dispute letters
app.post('/api/send-dispute-letter', async (req, res) => {
  try {
    const { 
      recipientEmail, 
      recipientName, 
      senderName, 
      disputeType, 
      province, 
      subject, 
      documentPath, 
      customMessage
    } = req.body;
    
    // Basic validation
    if (!recipientEmail || !disputeType || !province) {
      return res.status(400).json({ 
        success: false, 
        message: 'Missing required fields' 
      });
    }
    
    // Check if document exists if path provided
    if (documentPath && !fs.existsSync(documentPath)) {
      return res.status(400).json({ 
        success: false, 
        message: 'Document not found at specified path' 
      });
    }
    
    // Prepare email subject
    const emailSubject = subject || `Legal Dispute Communication: ${disputeType.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}`;
    
    // Prepare email HTML content
    const greetingName = recipientName || 'To Whom It May Concern';
    const senderSignature = senderName || 'A Concerned Individual';
    
    const getDisputeTypeDisplay = (type) => {
      const types = {
        landlord_cease_desist: 'Landlord Cease and Desist',
        repair_notice: 'Repair Notice',
        intent_to_vacate: 'Notice of Intent to Vacate',
        termination_notice: 'Lease Termination Notice',
        sublease_agreement: 'Sublease Agreement',
        cas_cease_desist: 'Children\'s Aid Society Cease and Desist',
        cas_worker_reassignment: 'CAS Worker Reassignment Request',
        cas_answer_plan: 'CAS Answer and Plan of Care Response',
        cas_records_request: 'CAS Records Request',
        cas_appeal: 'CAS Decision Appeal'
      };
      return types[type] || type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    };
    
    const getProvinceDisplay = (code) => {
      const provinces = {
        ON: 'Ontario',
        BC: 'British Columbia',
        AB: 'Alberta',
        SK: 'Saskatchewan',
        MB: 'Manitoba',
        QC: 'Quebec',
        NB: 'New Brunswick',
        NS: 'Nova Scotia',
        PE: 'Prince Edward Island',
        NL: 'Newfoundland and Labrador',
        YT: 'Yukon',
        NT: 'Northwest Territories',
        NU: 'Nunavut'
      };
      return provinces[code] || code;
    };
    
    const emailHtml = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e2e8f0; border-radius: 5px;">
        <div style="text-align: center; margin-bottom: 20px;">
          <h2 style="color: #4a5568; margin: 0;">SmartDispute.ai</h2>
          <p style="color: #718096; font-size: 14px;">Legal Self-Help Platform</p>
        </div>
        
        <p>Dear ${greetingName},</p>
        
        <p>Please find attached a formal legal document regarding a ${getDisputeTypeDisplay(disputeType)} 
        matter in ${getProvinceDisplay(province)}.</p>
        
        ${customMessage ? `<p>${customMessage}</p>` : ''}
        
        <p>This document has been prepared in accordance with the relevant legislation in 
        ${getProvinceDisplay(province)} and serves as official communication regarding this matter.</p>
        
        <p>Please review the attached document carefully and take appropriate action as outlined within.</p>
        
        <p>Sincerely,<br>${senderSignature}</p>
        
        <hr style="border: none; border-top: 1px solid #e2e8f0; margin: 20px 0;">
        
        <p style="color: #718096; font-size: 12px;">
          This communication was sent via the SmartDispute.ai platform, a service designed to assist
          individuals with legal self-help and document preparation. The attached document was generated
          based on information provided by the sender and relevant legal frameworks.
        </p>
      </div>
    `;
    
    // Prepare email data
    const emailOptions = {
      from: process.env.GMAIL_USER,
      to: recipientEmail,
      subject: emailSubject,
      html: emailHtml,
      text: emailHtml.replace(/<[^>]*>/g, ''), // Plain text version
    };
    
    // Add attachment if document path provided
    if (documentPath) {
      emailOptions.attachments = [
        {
          filename: `${disputeType}_${province}_document.docx`,
          path: documentPath,
          contentType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        }
      ];
    }
    
    // Send email
    const info = await transporter.sendMail(emailOptions);
    
    res.json({
      success: true,
      message: 'Dispute letter sent successfully',
      messageId: info.messageId
    });
    
  } catch (error) {
    console.error('Error sending dispute letter:', error);
    res.status(500).json({
      success: false,
      message: `Error sending dispute letter: ${error.message}`
    });
  }
});

// API route for checking email service status
app.get('/api/email-service-status', (req, res) => {
  const isConfigured = !!(process.env.GMAIL_USER && process.env.GMAIL_APP_PASS);
  
  res.json({
    status: isConfigured ? 'configured' : 'not_configured',
    emailAddress: isConfigured ? process.env.GMAIL_USER : null
  });
});

// Server
app.listen(PORT, () => {
  console.log(`Email service running on port ${PORT}`);
  
  // Check and report email configuration status
  if (!process.env.GMAIL_USER || !process.env.GMAIL_APP_PASS) {
    console.log('⚠️  Email service warning: Gmail credentials not configured');
    console.log('Set GMAIL_USER and GMAIL_APP_PASS in your .env file');
  } else {
    console.log(`✅ Email service configured with account: ${process.env.GMAIL_USER}`);
  }
  
  console.log('📧 Test email functionality: http://localhost:' + PORT + '/test-email');
});

// Export for testing
module.exports = { app, transporter };