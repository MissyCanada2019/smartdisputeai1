PK »&„Z standard/PK »&„Zstandard/client/PK »&„Zstandard/client/html/PK »&„Z%â{žšš!standard/client/html/.env.example# Create an application to obtain credentials at # https://developer.paypal.com/dashboard/applications/sandbox PAYPAL_CLIENT_ID=YOUR_CLIENT_ID_GOES_HERE PK »&„Zá8 standard/client/html/.gitignorenode_modules *.localPK »&„ZÅð)= = standard/client/html/README.md# Standard Integration with PayPal : HTML/JS ## Getting Started This guide will walk you through setting up and running the HTML/JS Standard Integration locally. ### Before You Code 1. **Setup a PayPal Account** To get started, you'll need a developer, personal, or business account. [Sign Up](https://www.paypal.com/signin/client?flow=provisionUser) or [Log In](https://www.paypal.com/signin?returnUri=https%253A%252F%252Fdeveloper.paypal.com%252Fdashboard&intent=developer) You'll then need to visit the [Developer Dashboard](https://developer.paypal.com/dashboard/) to obtain credentials and to make sandbox accounts. 2. **Create an Application** Once you've setup a PayPal account, you'll need to obtain a **Client ID** and **Secret**. [Create a sandbox application](https://developer.paypal.com/dashboard/applications/sandbox/create). ### Installation ```bash npm install ``` ### Configuration 1. Environmental Variables (.env) - Rename the .env.example file to .env - Update the following keys with their actual values - ```bash PAYPAL_CLIENT_ID= ``` 2. Connecting the client and server (vite.config.js) - Open vite.config.js in the root directory. - Locate the proxy configuration object. - Update the proxy key to match the server's address and port. For example: ```js export default defineConfig({ server: { proxy: { "/api": { target: "http://localhost:8080", // Replace with your server URL changeOrigin: true, }, }, }, }); ``` 3. Starting the development server - **Start the server**: Follow the instructions in the server's README to start it. Typically, this involves running npm run start or a similar command in the server directory. - **Start the client**: ```bash npm run start ``` This will start the development server, and you should be able to access the Standard Checkout Page in your browser at `http://localhost:3000` (or the port specfied in the terminal output). ### Additional Notes - **Server Setup**: Make sure you have the server up and running before starting the client. - **Environment Variables**: Carefully configure the environment variables in the .env file to match your setup. - **Proxy Configuration**: The proxy setting in vite.config.js is crucial for routing API requests from the client to the server during development. PK »&„ZÝ­=»»!standard/client/html/package.json{ "name": "paypal-standard-integration-frontend-html", "version": "1.0.0", "private": true, "type": "module", "scripts": { "build": "vite build", "preview": "vite preview", "start": "vite", "format": "npx prettier --write **/*.{js,md}", "format:check": "npx prettier --check **/*.{js,md}" }, "devDependencies": { "dotenv": "^16.4.5", "vite": "^5.4.2" } } PK »&„Zstandard/client/html/src/PK »&„ZÐò ò standard/client/html/src/app.jswindow.paypal .Buttons({ style: { shape: "rect", layout: "vertical", color: "gold", label: "paypal", }, message: { amount: 100, }, async createOrder() { try { const response = await fetch("/api/orders", { method: "POST", headers: { "Content-Type": "application/json", }, // use the "body" param to optionally pass additional order information // like product ids and quantities body: JSON.stringify({ cart: [ { id: "YOUR_PRODUCT_ID", quantity: "YOUR_PRODUCT_QUANTITY", }, ], }), }); const orderData = await response.json(); if (orderData.id) { return orderData.id; } const errorDetail = orderData?.details?.[0]; const errorMessage = errorDetail ? `${errorDetail.issue} ${errorDetail.description} (${orderData.debug_id})` : JSON.stringify(orderData); throw new Error(errorMessage); } catch (error) { console.error(error); resultMessage(`Could not initiate PayPal Checkout...

${error}`); } }, async onApprove(data, actions) { try { const response = await fetch(`/api/orders/${data.orderID}/capture`, { method: "POST", headers: { "Content-Type": "application/json", }, }); const orderData = await response.json(); // Three cases to handle: // (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart() // (2) Other non-recoverable errors -> Show a failure message // (3) Successful transaction -> Show confirmation or thank you message const errorDetail = orderData?.details?.[0]; if (errorDetail?.issue === "INSTRUMENT_DECLINED") { // (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart() // recoverable state, per // https://developer.paypal.com/docs/checkout/standard/customize/handle-funding-failures/ return actions.restart(); } else if (errorDetail) { // (2) Other non-recoverable errors -> Show a failure message throw new Error(`${errorDetail.description} (${orderData.debug_id})`); } else if (!orderData.purchase_units) { throw new Error(JSON.stringify(orderData)); } else { // (3) Successful transaction -> Show confirmation or thank you message // Or go to another URL: actions.redirect('thank_you.html'); const transaction = orderData?.purchase_units?.[0]?.payments?.captures?.[0] || orderData?.purchase_units?.[0]?.payments?.authorizations?.[0]; resultMessage( `Transaction ${transaction.status}: ${transaction.id}

See console for all available details` ); console.log( "Capture result", orderData, JSON.stringify(orderData, null, 2) ); } } catch (error) { console.error(error); resultMessage( `Sorry, your transaction could not be processed...

${error}` ); } }, }) .render("#paypal-button-container"); // Example function to show a result to the user. Your site's UI library can be used instead. function resultMessage(message) { const container = document.querySelector("#result-message"); container.innerHTML = message; } PK »&„ZÉXä.®®#standard/client/html/src/index.html
PK »&„Z§K£¢SS#standard/client/html/vite.config.jsimport { defineConfig } from 'vite' // https://vitejs.dev/config/ export default defineConfig({ plugins: [], envDir: "../", envPrefix: "PAYPAL", root: "src", server: { port: 3000, proxy: { "/api": { target: "http://localhost:8080", changeOrigin: true, secure: false, }, }, }, })PK »&„Zstandard/server/PK »&„Zstandard/server/node/PK »&„ZÓ:»…ÅÅ!standard/server/node/.env.example# Create an application to obtain credentials at # https://developer.paypal.com/dashboard/applications/sandbox PAYPAL_CLIENT_ID=YOUR_CLIENT_ID_GOES_HERE PAYPAL_CLIENT_SECRET=YOUR_SECRET_GOES_HERE PK »&„Z­_œ}standard/server/node/.gitignorenode_modules/ *.localPK »&„Z¨Ûstandard/server/node/README.md# Standard Integration Node.js Sample PayPal Standard Integration sample in Node.js ## Running the sample 1. Add your API credentials to the environment: - **Windows (powershell)** ```powershell $env:PAYPAL_CLIENT_ID = "" $env:PAYPAL_CLIENT_SECRET = "" ``` - **Linux / MacOS** ```bash export PAYPAL_CLIENT_ID="" export PAYPAL_CLIENT_SECRET="" ``` 2. Install the packages ```bash npm install ``` 3. Run the server ```bash npm run start ``` 4. Go to [http://localhost:8080/](http://localhost:8080/) PK »&„Z»#qKK!standard/server/node/package.json{ "name": "paypal-standard-integration-backend-node", "version": "1.0.0", "private": true, "type": "module", "dependencies": { "@paypal/paypal-server-sdk": "^1.0.0", "body-parser": "^1.20.3", "dotenv": "^16.3.1", "express": "^4.18.2" }, "scripts": { "server-dev": "nodemon server.js", "start": "npm run server-dev", "prod": "node server.js", "format": "npx prettier --write **/*.{js,jsx,md}", "format:check": "npx prettier --check **/*.{js,jsx,md}" }, "devDependencies": { "concurrently": "^8.2.1", "nodemon": "^3.0.1" } } PK »&„ZØ÷ŠNÜÜstandard/server/node/server.jsimport express from "express"; import "dotenv/config"; import { ApiError, CheckoutPaymentIntent, Client, Environment, LogLevel, OrdersController, } from "@paypal/paypal-server-sdk"; import bodyParser from "body-parser"; const app = express(); app.use(bodyParser.json()); const { PAYPAL_CLIENT_ID, PAYPAL_CLIENT_SECRET, PORT = 8080 } = process.env; const client = new Client({ clientCredentialsAuthCredentials: { oAuthClientId: PAYPAL_CLIENT_ID, oAuthClientSecret: PAYPAL_CLIENT_SECRET, }, timeout: 0, environment: Environment.Sandbox, logging: { logLevel: LogLevel.Info, logRequest: { logBody: true, }, logResponse: { logHeaders: true, }, }, }); const ordersController = new OrdersController(client); /** * Create an order to start the transaction. * @see https://developer.paypal.com/docs/api/orders/v2/#orders_create */ const createOrder = async (cart) => { const collect = { body: { intent: CheckoutPaymentIntent.Capture, purchaseUnits: [ { amount: { currencyCode: "USD", value: "100.00", }, }, ], }, prefer: "return=minimal", }; try { const { body, ...httpResponse } = await ordersController.createOrder( collect ); // Get more response info... // const { statusCode, headers } = httpResponse; return { jsonResponse: JSON.parse(body), httpStatusCode: httpResponse.statusCode, }; } catch (error) { if (error instanceof ApiError) { // const { statusCode, headers } = error; throw new Error(error.message); } } }; /** * Capture payment for the created order to complete the transaction. * @see https://developer.paypal.com/docs/api/orders/v2/#orders_capture */ const captureOrder = async (orderID) => { const collect = { id: orderID, prefer: "return=minimal", }; try { const { body, ...httpResponse } = await ordersController.captureOrder( collect ); // Get more response info... // const { statusCode, headers } = httpResponse; return { jsonResponse: JSON.parse(body), httpStatusCode: httpResponse.statusCode, }; } catch (error) { if (error instanceof ApiError) { // const { statusCode, headers } = error; throw new Error(error.message); } } }; app.post("/api/orders", async (req, res) => { try { // use the cart information passed from the front-end to calculate the order amount detals const { cart } = req.body; const { jsonResponse, httpStatusCode } = await createOrder(cart); res.status(httpStatusCode).json(jsonResponse); } catch (error) { console.error("Failed to create order:", error); res.status(500).json({ error: "Failed to create order." }); } }); app.post("/api/orders/:orderID/capture", async (req, res) => { try { const { orderID } = req.params; const { jsonResponse, httpStatusCode } = await captureOrder(orderID); res.status(httpStatusCode).json(jsonResponse); } catch (error) { console.error("Failed to create order:", error); res.status(500).json({ error: "Failed to capture order." }); } }); app.listen(PORT, () => { console.log(`Node server listening at http://localhost:${PORT}/`); }); PK »&„Z standard/PK »&„Z'standard/client/PK »&„ZUstandard/client/html/PK »&„Z%â{žšš!ˆstandard/client/html/.env.examplePK »&„Zá8 astandard/client/html/.gitignorePK »&„ZÅð)= = ²standard/client/html/README.mdPK »&„ZÝ­=»»!+standard/client/html/package.jsonPK »&„Z%standard/client/html/src/PK »&„ZÐò ò \standard/client/html/src/app.jsPK »&„ZÉXä.®®#‹standard/client/html/src/index.htmlPK »&„Z§K£¢SS#zstandard/client/html/vite.config.jsPK »&„Z!standard/server/PK »&„Z