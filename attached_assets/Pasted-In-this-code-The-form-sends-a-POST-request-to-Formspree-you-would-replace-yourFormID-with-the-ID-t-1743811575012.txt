In this code:
The form sends a POST request to Formspree (you would replace yourFormID with the ID they provide when you set up your form on their site, or you could use your email as shown in Formspree docs, but they now prefer the form ID method).
It includes a hidden _subject field (so that the email you receive has a clear subject line) and a _next field. The _next field specifies a URL to redirect the user after a successful submission​
TOSBOURN.COM
. Here you should put a URL on your site – typically a Thank You page (e.g., thank-you.html). You will need to create that thank-you page with a nice message like "Thanks, we received your inquiry. We’ll be in touch soon.".
The fields are Name, Email, Message in this example. All marked required to prevent empty submissions.
You can style this form with CSS to match your site’s design (form elements by default are plain). Ensure the form is responsive: on mobile, inputs should be full width, easy to tap, and the font should be readable. If you prefer not to use an external service like Formspree, you could implement your own backend on Replit (for example, if your Replit is a Node.js project, you can create an endpoint to handle the form, or use something like Replit’s built-in email service if any). But using Formspree or a similar form-handling service is quick and requires no server code – a big advantage for static sites. Add the form to your site: If it’s on a dedicated page (say contact.html), link your CTAs to this page (href="contact.html" on your CTA buttons). Also add a navigation menu link to Contact if appropriate. Double-check on mobile that the form is usable: inputs are not off-screen, labels are visible, etc.
Tracking Form Submissions as Conversions
Having the form is great, but we also want to track when a user successfully submits it. A form submission is essentially the conversion in many cases – it means a lead captured. We’ll use GA4/GTM to track this event. There are a couple of ways to capture form submissions:
Thank You Page method (Recommended for simplicity): If you redirect users to a thank-you page after submission (as in the code above with _next), you can treat a view of that thank-you page as a conversion. Essentially, if the thank-you page is only reached after a successful form submission, then pageviews on that page = number of submissions. Tracking this is straightforward with GA4 because every page view is already tracked. You can simply mark the page_view event for the thank-you page as a conversion. For example, in GA4 you could go to Configure → Events and create a custom event named "form_submit_success" that triggers when page_location contains "thank-you.html", then mark that event as conversion​
SUPPORT.GOOGLE.COM
. However, an easier route: in GA4’s Conversions settings, there is an option to specify a URL as a conversion (this may depend on GA4 interface updates). If not, the custom event approach works: basically tell GA4 “when someone loads thank-you.html, count it as a conversion event”. Alternatively, use GTM: set up a Page View trigger for the thank-you page and fire a GA4 Event tag like form_submit on that page. But that’s effectively the same outcome, just an extra step when GA4 already sees the page_view. Many find the GA4 interface way (creating an event based on page_location) a bit tricky, so doing it in GTM as an event might be easier to grasp:
In GTM, create a Trigger: Page View -> Some Page -> Page URL or Path equals your thank-you page.
Create a GA4 Event Tag named “Form Submitted”, with event name e.g. form_submit (or use GA4’s suggested event name “generate_lead”, which is a recommended GA4 event for lead submissions).
Attach the trigger and publish. Now each time someone hits the thank-you page, it will also send a form_submit event to GA4. You can mark form_submit as a conversion in GA4.
The advantage of using GA4’s recommended event names like generate_lead is that GA4 may automatically mark it as a conversion or categorize it (as of now you still manually enable it as conversion). But the name is semantically clear in reports.
Direct Form Submission event (no thank-you page): If you decide not to redirect to a new page (say you show an inline success message via JavaScript), you can still track the submission. In this case, you might use GTM’s Form Submission trigger or a manual dataLayer.push. GTM has a built-in trigger type “Form Submission” which listens for form submits. However, it sometimes requires the form to not redirect immediately or to have event.preventDefault(). A simpler reliable method:
Add a small JavaScript snippet that pushes an event to the dataLayer when the form is submitted. E.g.: